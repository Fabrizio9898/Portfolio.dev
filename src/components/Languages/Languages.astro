---
interface Language {
  name: string;
  abbreviation: string;
  code: string;
}

const LANGUAGES: Language[] = [
  {
    name: "Español",
    abbreviation: "ES",
    code: "es",
  },
  {
    name: "English",
    abbreviation: "EN",
    code: "en",
  },
];
---

<nav
  class="z-20 font-medium tracking-wide text-secondary absolute start-2 top-0 md:start-10"
>
  <ul id="lista-menu" class="hidden">
    <a
      href="#"
      class="language-link-desktop"
      data-code="es"
      data-abbreviation="ES"
    >
      <li
        class="flex h-16 items-center justify-center px-10 duration-200 opacity-90 dark:bg-[#333] selected-language transition hover:bg-gray-900 hover:text-white dark:hover:bg-gray-100 dark:hover:text-black"
        style="clip-path:polygon(3% 0%, 0% 100%, 100% 97%, 90% 0);"
        data-language-name="Español"
      >
        Español
      </li>
    </a>
    <a
      href="#"
      class="language-link-desktop"
      data-code="en"
      data-abbreviation="EN"
    >
      <li
        class="flex h-16 items-center justify-center px-10 duration-200 opacity-90 dark:bg-[#333] selected-language transition hover:bg-gray-900 hover:text-white dark:hover:bg-gray-100 dark:hover:text-black"
        style="clip-path: polygon(0% 0%, 10% 97%, 99% 100%, 100% 0%);"
        data-language-name="English"
      >
        English
      </li>
    </a>
  </ul>
  <div id="menu-desplegable" class="relative inline-block">
    <div class="relative cursor-pointer" id="languages-menu-btn">
      <div
        class="flex h-16 min-w-[175px] items-center justify-center gap-2 bg-[#183749] dark:bg-[#183749] px-10"
        style="clip-path: polygon(3% 0%, 0% 100%, 100% 100%, 90% 0);"
        id="selected-language-mobile"
      >
        Español <svg
          role="img"
          fill="currentColor"
          id="locale-caret"
          class="size-4 shrink-0 transition-transform duration-200 ease-in-out motion-reduce:transition-none rotate-180"
          ><symbol viewBox="0 0 256 256" id="a:1">
            <path
              d="M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z"
            ></path>
          </symbol><use href="#a:1"></use></svg
        >
      </div>
      <ul
        id="locale-options"
        role="listbox"
        class="absolute left-0 top-full z-10 max-h-80 w-full overflow-auto scrollbar-hide hidden"
        data-current-language="es"
      >
        {
          LANGUAGES.filter((lang) => lang.code !== "es").map((lang) => (
            <a
              href="#"
              class="language-link-mobile"
              data-code={lang.code}
              data-abbreviation={lang.abbreviation}
            >
              <li
                class="languages-menu-option flex h-16 items-center justify-center px-10 transition-opacity duration-200 motion-reduce:transition-none hover:opacity-90 dark:bg-[#333]"
                style="clip-path: polygon(0% 0%, 10% 100%, 90% 100%, 100% 0%);"
                data-language-name={lang.name}
              >
                {lang.name}
              </li>
            </a>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<style>
  li {
    background-color: rgb(221, 218, 210);
  }

  nav {
    view-timeline: --scroll;
  }

  .selected @keyframes scale-up {
    to {
      scale: 1.5;
    }
  }

  @keyframes fade-away {
    to {
      opacity: 0;
    }
  }

  @media (min-width: 1024px) {
    /* lg */
    li {
      animation:
        scale-up both ease-in-out,
        fade-away both linear;
      animation-timeline: --scroll;
      animation-range:
        exit 0% exit 100%,
        exit 50% exit 90%;
    }
  }

  /* Desactiva la animación en pantallas menores */
  @media (max-width: 1023px) {
    /* md y menores */
    li {
      animation: none;
    }
  }

  @media (min-width: 1090px) {
    #menu-desplegable {
      display: none;
    }
    #lista-menu {
      display: flex;
    }
  }
  #locale-options {
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
    opacity: 0;
    transform: translateY(-10px);
  }
  #locale-options.show {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  // Importa cualquier dependencia que puedas necesitar
  // Importa cualquier dependencia que puedas necesitar
  import { atom } from "nanostores";
  import { getI18 } from "../../i18n";

  // Define las interfaces para los idiomas y la estructura del idioma
  interface Language {
    name: string;
    abbreviation: string;
    code: string;
  }

  interface I18n {
    PORTFOLIO_TITLE: string;
    [key: string]: string;
  }

  // Define los idiomas disponibles - ahora en el ámbito global
  const LANGUAGES: Language[] = [
    {
      name: "Español",
      abbreviation: "ES",
      code: "es",
    },
    {
      name: "English",
      abbreviation: "EN",
      code: "en",
    },
  ];

  // Almacena el idioma actual
  const currentLanguage = atom<string>("es");

  // Funciones para obtener y establecer el idioma en el almacenamiento local
  const getLanguagePreference = (): string => {
    if (typeof localStorage === "undefined") return "es";

    // Verifica si existe como propiedad directa
    const storedLang = localStorage.getItem("language");
    if (storedLang) return storedLang;

    // Verifica si existe como valor directo
    const directLang = localStorage.getItem("es") || localStorage.getItem("en");
    if (directLang) return directLang;

    try {
      // Intenta buscar en un objeto JSON
      const langObj = JSON.parse(localStorage.getItem("language") || "{}");
      if (langObj && langObj.language) return langObj.language;
    } catch (e) {
      console.error("Error parsing language from localStorage:", e);
    }

    return "es"; // Valor por defecto
  };

  const setLanguagePreference = (code: string): void => {
    if (typeof localStorage === "undefined") return;

    localStorage.setItem("language", code);
    currentLanguage.set(code);
    document.documentElement.lang = code;
  };

  // Función para verificar si estamos en modo oscuro
  const isDarkMode = (): boolean => {
    if (typeof localStorage === "undefined") return false;

    // Verificar si el tema está en localStorage
    const theme = localStorage.getItem("theme");
    if (theme === "dark") return true;

    // Si no hay tema en localStorage, verificar si el sistema está en modo oscuro
    if (
      theme === null &&
      window.matchMedia &&
      window.matchMedia("(prefers-color-scheme: dark)").matches
    ) {
      return true;
    }

    // Verificar si el elemento html tiene la clase 'dark'
    return document.documentElement.classList.contains("dark");
  };

  // Función para actualizar la UI según el idioma
  const updateLanguageUI = (code: string): void => {
    const language =
      LANGUAGES.find((lang) => lang.code === code) || LANGUAGES[0];

    // Actualizar el texto del idioma seleccionado en móvil
    const selectedLanguageMobile = document.getElementById(
      "selected-language-mobile",
    );
    const localeCaret = document.getElementById("locale-caret");
    const localeOptions = document.getElementById("locale-options");

    if (selectedLanguageMobile && localeCaret) {
      const svgElement = localeCaret.cloneNode(true) as Node;
      selectedLanguageMobile.textContent = language.name + " ";
      selectedLanguageMobile.appendChild(svgElement);
    }

    // Actualizar las opciones del menú desplegable
    if (localeOptions) {
      localeOptions.setAttribute("data-current-language", code);
      localeOptions.innerHTML = "";
      LANGUAGES.filter((lang) => lang.code !== code).forEach((lang) => {
        const link = document.createElement("a");
        link.href = "#";
        link.className = "language-link-mobile";
        link.setAttribute("data-code", lang.code);
        link.setAttribute("data-abbreviation", lang.abbreviation);

        const li = document.createElement("li");
        li.className =
          "languages-menu-option flex h-16 items-center justify-center px-10 transition-opacity duration-200 motion-reduce:transition-none hover:opacity-90 dark:bg-[#333]";
        li.style.clipPath = "polygon(0% 0%, 10% 100%, 90% 100%, 100% 0%)";
        li.style.backgroundColor = "#dddad2";
        li.setAttribute("data-language-name", lang.name);
        li.textContent = lang.name;

        link.appendChild(li);
        localeOptions.appendChild(link);
      });

      document.querySelectorAll(".language-link-mobile").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const code = link.getAttribute("data-code");
          if (code) {
            setLanguagePreference(code);
            updateLanguageUI(code);
            closeDropdown();
          }
        });
      });
    }

    // Actualizar la selección visual en el menú de escritorio
    document
      .querySelectorAll<HTMLAnchorElement>(".language-link-desktop")
      .forEach((link) => {
        const linkCode = link.getAttribute("data-code");
        const liElement = link.querySelector<HTMLLIElement>("li");

        if (liElement) {
          // Restaurar estilos por defecto - NO modificamos el backgroundColor directamente
          // para permitir que los estilos de Tailwind funcionen correctamente
          liElement.style.backgroundColor = ""

          liElement.classList.remove(
            "bg-gray-900",
            "text-white",
            "bg-gray-100",
            "text-black",
            "selected-language-item",
          );

          // Aplicar estilos de selección si es el idioma actual
          if (linkCode === code) {
            // Añadimos una clase para marcar el elemento seleccionado
            liElement.classList.add("selected-language-item");

            // Aplicamos estilos según el modo (claro/oscuro)
            if (isDarkMode()) {
              // En modo oscuro
              liElement.style.backgroundColor = "#f3f4f6"; // Equivalente a bg-gray-100
              liElement.classList.add("text-black");
            } else {
              // En modo claro
              liElement.style.backgroundColor = "#111827"; // Equivalente a bg-gray-900
              liElement.classList.add("text-white");
            }
          }
        }
      });

    try {
      const i18n = getI18({ currentLocale: code });
      updateTranslations(i18n);
    } catch (error) {
      console.error("Error updating translations:", error);
    }
  };

  // Función para actualizar las traducciones en la UI
  const updateTranslations = (i18n: I18n): void => {
    if (!i18n) return;

    document.title = i18n.PORTFOLIO_TITLE || document.title;

    document.querySelectorAll<HTMLElement>("[data-i18n]").forEach((element) => {
      const key = element.getAttribute("data-i18n");
      if (key && i18n[key]) {
        element.textContent = i18n[key];
      }
    });

    window.dispatchEvent(
      new CustomEvent("languageChanged", { detail: { i18n } }),
    );
  };

  // Función para abrir el dropdown del idioma
  const toggleDropdown = (): void => {
    const localeOptions = document.getElementById("locale-options");
    const localeCaret = document.getElementById("locale-caret");

    if (localeOptions) {
      const isHidden = localeOptions.classList.contains("hidden");

      if (isHidden) {
        localeOptions.classList.remove("hidden");
        setTimeout(() => localeOptions.classList.add("show"), 10);
      } else {
        localeOptions.classList.remove("show");
        setTimeout(() => localeOptions.classList.add("hidden"), 300);
      }

      if (localeCaret) {
        localeCaret.classList.toggle("rotate-180");
      }
    }
  };

  // Función para cerrar el dropdown
  const closeDropdown = (): void => {
    const localeOptions = document.getElementById("locale-options");
    const localeCaret = document.getElementById("locale-caret");

    if (localeOptions) {
      localeOptions.classList.remove("show");
      setTimeout(() => localeOptions.classList.add("hidden"), 300);
    }

    if (localeCaret) {
      localeCaret.classList.add("rotate-180");
    }
  };

  // Inicialización del idioma desde el almacenamiento
  const initializeLanguage = (): void => {
    const storedLanguage = getLanguagePreference();
    setLanguagePreference(storedLanguage);
    updateLanguageUI(storedLanguage);
  };

  // Configuración de los eventos de los idiomas
  const setupEventListeners = (): void => {
    const languageToggle = document.getElementById("languages-menu-btn");
    if (languageToggle) {
      languageToggle.addEventListener("click", (e) => {
        e.stopPropagation();
        toggleDropdown();
      });
    }

    document.addEventListener("click", () => {
      closeDropdown();
    });

    document
      .querySelectorAll<HTMLAnchorElement>(".language-link-mobile")
      .forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const code = link.getAttribute("data-code");
          if (code) {
            setLanguagePreference(code);
            updateLanguageUI(code);
            closeDropdown();
          }
        });
      });

    document
      .querySelectorAll<HTMLAnchorElement>(".language-link-desktop")
      .forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const code = link.getAttribute("data-code");
          if (code) {
            setLanguagePreference(code);

            // Actualizar todos los elementos de idioma
            document.querySelectorAll<HTMLAnchorElement>(".language-link-desktop").forEach((otherLink) => {
  const otherLi = otherLink.querySelector<HTMLLIElement>("li");
  if (otherLi) {
    otherLi.style.backgroundColor = "";
    otherLi.classList.remove("text-white", "text-black", "selected-language-item");
  }
})

            // Aplicar estilos al elemento seleccionado
            const liElement = link.querySelector<HTMLLIElement>("li");
            if (liElement) {
              // Añadimos una clase para marcar el elemento seleccionado
              liElement.classList.add("selected-language-item");

              if (isDarkMode()) {
                // En modo oscuro
                liElement.style.backgroundColor = "#f3f4f6"; // Equivalente a bg-gray-100
                liElement.classList.add("text-black");
              } else {
                // En modo claro
                liElement.style.backgroundColor = "#111827"; // Equivalente a bg-gray-900
                liElement.classList.add("text-white");
              }
            }

            updateLanguageUI(code);
          }
        });
      });

    // Escuchar cambios en el tema (claro/oscuro)
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", () => {
        // Actualizar la UI cuando cambia el tema del sistema
        updateLanguageUI(currentLanguage.get());
      });

    // Observar cambios en la clase 'dark' del elemento html
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === "class") {
          // Actualizar la UI cuando cambia la clase del elemento html
          updateLanguageUI(currentLanguage.get());
        }
      });
    });

    observer.observe(document.documentElement, { attributes: true });
  };

  // Inicialización cuando el DOM está listo
  document.addEventListener("DOMContentLoaded", () => {
    initializeLanguage();
    setupEventListeners();
  });

  // Suscripción a los cambios del idioma
  currentLanguage.subscribe((lang) => {
    updateLanguageUI(lang);
  });

  // Manejo de transiciones de página en Astro
  document.addEventListener("astro:after-swap", () => {
    initializeLanguage();
    setupEventListeners();
  });
</script>
